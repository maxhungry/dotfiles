let mapleader = ' '
let maplocalleader = ' '

set surround
set commentary
set multiple-cursors
set matchit
set argtextobj
set textobj-entire

set incsearch  " Search as chars entered
set ignorecase
set smartcase  " Unless they contain at least one capital letter
set hlsearch
set clipboard^=unnamed,unnamedplus
set relativenumber

set showmode
set nu

nnoremap coh :set hls!<cr>

nnoremap <leader>s :w<cr>
nnoremap <leader>q :q<cr>
nnoremap <leader>Q :qa!<cr>

nnoremap [<space> <s-o><esc>
nnoremap ]<space> o<esc>
nnoremap <silent> [e dd<s-p>
nnoremap <silent> ]e ddp

nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

nmap <silent> [g :tabprevious<CR>
nmap <silent> ]g :tabnext<CR>

imap fd <Esc>

map <leader>z <Action>(MaximizeEditorInSplit)
map <S-Space> <Action>(GotoNextError)
map <leader>j <Action>(SelectInProjectView)
map <leader>R <Action>(RenameElement)

map <leader>b <Action>(ToggleLineBreakpoint)
map <leader>o <Action>(FileStructurePopup)

map <leader>] <Action>(GotoImplementation)
map <leader>, <Action>(ReformatWithPrettierAction)
map <leader>h <Action>(Vcs.ShowHistoryForBlock)

map <leader>a <Action>(Annotate)
map <leader>k <Action>(ShowIntentionActions)
map <leader>i <Action>(QuickJavaDoc)
map <leader>I <Action>(QuickTypeDefinition)
map <leader>u <Action>(FindUsages)
map <leader>r <Action>(RunClass)
map <leader>d <Action>(DebugClass)

" map <leader>n <Action>(VcsShowNextChangeMarker)
" map <leader>p <Action>(VcsShowPrevChangeMarker)

map <leader>vo <Action>(OpenEditorInOppositeTabGroup)

map <leader>e <Action>(ShowErrorDescription)
map <leader>T <Action>(GotoTest)

map <leader>p <Action>(SearchEverywhere)
map <leader>A <Action>(GotoAction)
